' {$STAMP BS2}
' {$PBASIC 2.5}

'R O B O T   H E A D   v1.3

'* * * * * * * * * * * *
'* General Description *
'* * * * * * * * * * * *

'This program tracks a light source facing the robot's head.  Two photoresistors are mounted on the front at a 90 degree
'angle with each other to track the light source.  The calculated resistance values of the photoresistors are sent to
'the ANSI serial terminal.  A servo moves a white flag to point to the approximate direction of the light source.

'This program monitors the ambient air temperature with a thermistor.  The calculated resistance and the approximate
'temperature in degrees Fahrenheit are sent to the ANSI serial terminal.  An ANSI graphic of a thermometer from 40F to
'110F also displays approximate temperature. If the ambient air temperature exceeds a preset value, the "voicebox"
'sounds an alarm.

'An infra-red phototransistor pulls pin 12 LOW when illuminated.

'An Op-Amp monitors the servo battery voltage. Frankenstein ramps up the voltage using PWM pin 10 (Low_Voltage_Threshold)
'until the Op-Amp signals pin 11.  This final PWM value is close to the servo battery voltage.
'The PWM output pin needs an RC network to store the voltage. Added a 1Kohm resistor and a 3.3uF capacitor between the
'PWM pin and the "-" input of the op-amp to smooth the PWM voltage.

'Pin 9 drives a piezo speaker element - the "voicebox" for audible communication - Morse, tunes, tones, DTMF, etc.

'Pin 8 drives a servo.

'Pin 7 will monitor a 38kHz IR receiver for binary signals.

'Pin 6 will monitor the CPU battery voltage in a similar manner as Pin 11 monitors the servo battery voltage.  They will
'share pin 10 to compare the PWM signal voltage.

'Pin 5 and pin 4 drive a demultiplexer circuit that selects 1 of 3 light sources.  A 2-bit binary code activates one
'light source at a time:
'%00 -- All lamps off
'%01 -- Activate a 48mW IR floodlamp
'%10 -- Activate a white LED
'%11 -- Activate a 5mW red LASER

'Pins 0-3 control Frankenstein's motion as follows:
'Pins 3 and 2 select Forward/Reverse/Stop
'%00 -- STOP
'%01 -- Reverse
'%10 -- Forward
'%11 -- STOP (not needed but an inherent function of the circuitry)

'Pins 1 and 0 steer Straight/Left/Right
'%00 -- Straight
'%01 -- Right Turn
'%10 -- Left Turn
'%11 -- Staight (not needed but an inherent function of the circuitry)

'* * * * * * * * * *
'* Initialization  *
'* * * * * * * * * *

DIRS=$07FF

LeftOpticNerve          PIN    15      'Photoresistor facing left monitors ambient visible light.
RightOpticNerve         PIN    14      'Photoresistor facing right monitors ambient visible light.
TemperatureNerve        PIN    13      'Thermistor monitors ambient air temperature.
Rear_Photo_Bumper       PIN    12      'Infra-red phototransistor will monitor IR radiation with a timing capacitor.
                                       'It is currently setup as a binary detector with a 10Kohm pull-up resistor.
Battery_Monitor_6V      PIN    11      'The output of an op-amp goes LOW when the servo power supply voltage drops below
                                       'the PWM voltage from PIN 8 feeding the op-amp's "-" input.
Low_Voltage_Threshold   PIN    10      'PWM output voltage to op-amps monitoring power supplies.
Voicebox                PIN    9       'Piezo speaker element (communicate audibly via Morse?).
Muscle_Nerve            PIN    8       'Parallax Servo control output.
IR_RC_Receiver          PIN    7       'A 38 kHz IR binary receiver (used for remote control to select behaviors).
Battery_Monitor_9V      PIN    6       'CPU Battery Monitor (same as servo battery monitor)
Lamp_SelectB            PIN    5       'A 2-bit binary code selects 1 of 3 lamps: %00:All lamps off;%01:Activate a 48mW
Lamp_SelectA            PIN    4       'infrared floodlamp;%10:Activate a white LED;%11:Activate a 5 mW red LASER diode.
Fwd                     PIN    3       'These two bits control forward & reverse motion: %00 or %11:STOP; %01:Reverse
Rvs                     PIN    2       '%10:Forward. Try using PWM on these pins to control speed.
Left                    PIN    1       'These two bits steer left and right: %00 or %11:Straight; %01:Right Turn;
Right                   PIN    0       '%10:Left Turn. These bits are binary only - not PWM compatible.

LeftEye                 VAR    Word    'These variables measure the discharge time of the capacitors through the
RightEye                VAR    Word    'photoresistors of each eye.  The electrical resistance of the sensors is
Thermistor              VAR    Word    'calculated by multiplying the raw data units by two to obtain the time in
                                       'microseconds.  This figure is multiplied by 100 to obtain the resistance
Capacitance             CON    2       'in ohms.  0.01 uF capacitors are used on the circuit board.  This constant
                                       'can be changed to improve the accuracy of the calculated data on the ANSI
                                       'terminal screen.  The formula assumes that all three capacitors are the
                                       'exact same value.

Temperature             VAR    Byte    'Calculated temperature in degrees Fahrenheit.
High_Temp               VAR    Byte    'Threshold of high temperature alarm.

x_axis                  VAR    Byte    'ANSI screen column for temperature graph.
prev_x_axis             VAR    Byte    'Previous ANSI column used.

Compare_this_voltage    CON    170     'PWM value compared to servo battery voltage

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'* Initialize ANSI terminal and display headings for sensor readings *
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

PAUSE 1000

DEBUG   $1B, $5B, "0m",                                  'Set ANSI screen attributes to gray text on a black background
        $1B, $5B, "2J",                                  'and clear the screen.
        $1B, $5B, "1;29fROBOT HEAD v1.3",                'Display headings at various cursor positions.
        $1B, $5B, "2;24f----- SENSOR REPORT -----",
        $1B, $5B, "3;0fSet high temperature alarm (40-110):"

DEBUGIN DEC High_Temp
        High_Temp = High_Temp MIN 40 MAX 110

DEBUG   $1B, $5B, "0m",
        $1B, $5B, "3;0f",
        $1B, $5B, "KServo Battery",                      'Display servo battery status.
        $1B, $5B, "4;0fTiming Capacitors:",
        $1B, $5B, "1m",
        $1B, $5B, "4;20f0.01",
        $1B, $5B, "0m",
        $1B, $5B, "4;24fuF",
        $1B, $5B, "5;0fLeft Eye:       Kohms",
        $1B, $5B, "5;26fRight Eye:       Kohms",
        $1B, $5B, "6;0fThermistor:       Kohms",
        $1B, $5B, "6;26fTemperature:    F",
        $1B, $5B, "6;45fHigh Temp Alarm Set Point:    F",
        $1B, $5B, "1;33;41m", $1B, $5B, "6;72f", DEC3 High_Temp,
        $1B, $5B, "0m",
        $1B, $5B, "7;16f----- THERMOMETER (degrees Fahrenheit) -----", 'Draw thermometer on ANSI screen.
        $1B, $5B, "30;47m", $1B, $5B, "9;20f4", $1B, $5B, "10;20f0",  'White background
        $1B, $5B, "46m", $1B, $5B, "9;25f5", $1B, $5B, "10;25f0",     'Cyan background
        $1B, $5B, "37;44m", $1B, $5B, "9;30f6", $1B, $5B, "10;30f0",  'Blue background
        $1B, $5B, "30;42m", $1B, $5B, "9;35f7", $1B, $5B, "10;35f0",  'Green background
        $1B, $5B, "43m", $1B, $5B, "9;40f8", $1B, $5B, "10;40f0",     'Yellow background
        $1B, $5B, "1;33;41m", $1B, $5B, "9;45f9", $1B, $5B, "10;45f0",'Red background
        $1B, $5B, "45m",                                              'Magenta background
        $1B, $5B, "9;50f1", $1B, $5B, "10;50f0", $1B, $5B, "11;50f0",
        $1B, $5B, "9;55f1", $1B, $5B, "10;55f1", $1B, $5B, "11;55f0",
        $1B, $5B, "0m"                                       'Gray characters on black background.

  GOSUB sound_alarm                          'Beep twice - initialization successful.

'* * * * * * * * *
'* Main Program  *
'* * * * * * * * *

  DO                                         'Perform this loop forever.
    GOSUB poll_nerves                        'Get lighting & temperature data from resistive sensors.
    GOSUB display_report                     'Update serial ANSI terminal.
    GOSUB operate_servo                      'Operate servo-mechanism.
  LOOP
  END

'* * * * * * * *
'* Subroutines *
'* * * * * * * *

poll_nerves:

    HIGH TemperatureNerve                    'Apply +5 volts (HIGH) to charge the capacitors on the optic nerves.
    HIGH LeftOpticNerve
    HIGH RightOpticNerve

    PAUSE 1                                  'Charge the capacitors for at least 1 millisecond for a full +5V charge.
                                             '220 ohms (in the port lines) * 0.01uF = 2.2uS = 1 RC time constant
                                             '2.2uS * 5 time constants (for full charge) = 11 microseconds.
                                             '11uS + 20% (for tolerances) = 13.2uS.

    RCTIME TemperatureNerve, 1, Thermistor   'Allow the Temperature capacitor to discharge and store the discharge time.
    RCTIME LeftOpticNerve, 1, LeftEye        'Allow the LeftEye capacitor to discharge and store the discharge time.
    RCTIME RightOpticNerve, 1, RightEye      'Allow the RightEye capacitor to discharge and store the discharge time.

    Thermistor = Thermistor * Capacitance    'Convert all raw sensor data to approximate resistance in Kohms.
    LeftEye = LeftEye * Capacitance
    RightEye = RightEye * Capacitance

RETURN

display_report:
                                             'Use a table to convert thermistor resistance to temperature.
                                             'Resistance (ohms) | Degrees Fahrenheit
                                             '    20000         |        54
                                             '    19600         |        55
                                             '    19000         |        56
                                             '    18200         |        57
                                             '    18000         |        58
                                             '    17800         |        59
                                             '    17400         |        60
                                             '    17200         |        61
                                             '    16600         |        62
                                             '    16500         |        63
                                             '    16400         |        64
                                             '    16000         |        65
                                             '    15800         |        66
                                             '    15600         |        67
                                             '    15400         |        68
                                             '    13600         |        75
                                             '    12800         |        76
                                             '    12400         |        77
                                             '    12200         |        80
                                             '    11400         |        86
                                             '     9200         |        98
                                             '     9000         |        100
                                             '     8800         |        102
                                             '     8600         |        103
                                             '     8400         |        104
                                             '     8200         |        106
                                             '     8000         |
                                             '     7800         |
                                             '     7600         |
                                             '     7400         |        108
                                             '     7200         |        110

                                             'Divide resistance values by 100 and subtract 1 in the lookdown table.

    LOOKDOWN Thermistor, > [199, 195, 189, 181, 177, 173, 171, 165, 164, 159, 157, 155, 153, 137, 127, 123, 121, 113, 91, 89, 87, 85, 83, 81, 73, 71], Temperature
    LOOKUP Temperature, [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 75, 76, 77, 80, 86, 98, 100, 102, 103, 104, 106, 108, 110], Temperature

    IF Temperature > High_Temp THEN GOSUB sound_alarm    'When the temperature exceeds a certain value, sound the alarm!

    prev_x_axis = x_axis                     'Store previous column and clear it with a space during the report.
    x_axis = Temperature / 2                 'Convert temperature to a column on the ANSI terminal for the graphic
                                             'thermometer.

    DEBUG $1B, $5B, "1;37;40m"               'Set data colors to bright white on black.

    PWM Low_Voltage_Threshold, Compare_this_voltage, 17          'Charge the PWM RC network for 17ms.
    IF Battery_Monitor_6V = 1 THEN                               '6V battery OK?
       DEBUG $1B, $5B, "3;15f OK"                                'Yes
    ELSE
       GOSUB sound_alarm                                         'sound the alarm!
       DEBUG $1B, $5B, "1;33;41m",                               'Yellow on red.
             $1B, $5B, "3;15fLOW",                               'No
             $1B, $5B, "1;37;40m"                                'Reset colors to bright white on black.
    ENDIF

    DEBUG $1B, $5B, "5;11f", DEC4 LeftEye / 10,   'Display calculated sensor resistance in Kohms with one decimal place
          $1B, $5B, "5;15f.", DEC1 LeftEye,
          $1B, $5B, "5;37f", DEC4 RightEye / 10,
          $1B, $5B, "5;41f.", DEC1 RightEye,
          $1B, $5B, "6;13f", DEC4 Thermistor / 10,
          $1B, $5B, "6;17f.", DEC1 Thermistor,
          $1B, $5B, "6;39f", DEC3 Temperature,
          $1B, $5B, "8;", DEC prev_x_axis, "f ", 'Put an empty space in the previous position of the thermometer display
          $1B, $5B, "8;", DEC x_axis, "f|"       'and replace it with a vertical bar "|" at the current position.

    RETURN

sound_alarm:

    FREQOUT Voicebox, 100, 2500
    PAUSE 250
    FREQOUT Voicebox, 100, 2500
    RETURN

operate_servo:

    IF (LeftEye - RightEye) < 20 OR (RightEye - LeftEye) < 20 THEN 'Light source is centered
       PULSOUT Muscle_Nerve, 750
    ELSEIF LeftEye < RightEye THEN                                 'Light source is to the left
       PULSOUT Muscle_Nerve, 1150
       PAUSE 5
    ELSE                                                           'Light swource is to the right
       PULSOUT Muscle_Nerve, 350
       PAUSE 5
    ENDIF
                                                 '750 is centered
RETURN
    END

'* * * * *
'* Notes *
'* * * * *

'Left Eye:   3.75Kohm     804Kohm
'Right Eye:  3.38Kohm     630Kohm
'LR Light:      ON          OFF

'Calculate appropriate capacitor values to balance discharge times.
'1000pF would discharge in 2 uSeconds through a 2Kohm load.

'533pF would discharge in 2 uSeconds through a 3.75Kohm load.
'592pF would discharge in 2 uSeconds through a 3.38Kohm load.

'533pF would discharge in 429 uSeconds through a 804Kohm load.
'592pF would discharge in 373 uSeconds through a 630Kohm load.

'100pF would discharge in 0.375 uSeconds through a 3.75Kohm load.
'100pF would discharge in 0.338 uSeconds through a 3.38Kohm load.
'100pF would discharge in 80 uSeconds through a 804Kohm load.
'100pF would discharge in 63 uSeconds through a 630Kohm load.

'Don't compare the "real-time" sensor values to each other in "real-time" because the resistance of the sensors is slow
'to react when the scene changes from light to dark.  Rather compare the "real-time" sensor value to a past (stored)
'value to determine whether the light level is changing from light-to-dark or dark-to-light.