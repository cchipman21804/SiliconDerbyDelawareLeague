' {$STAMP BS2}
' {$PBASIC 2.5}

'R O B O T   H E A D   v1.4

'* * * * * * * * * * * *
'* General Description *
'* * * * * * * * * * * *

'Pins 15 & 14 track a light source facing the robot's head.  Two photoresistors are mounted on the front at a 90 degree
'angle with each other to track the light source.  A servo moves a white flag to point to the approximate direction of
'the light source.

'Pin 13 monitors the ambient air temperature with a thermistor.  If the ambient air temperature exceeds a preset value,
'the "voicebox" sounds an alarm.

'Pin 12 monitors a 38kHz IR receiver for binary signals. It is mounted adjacent to the IR Flood Lamp on Frankenstein's
'raygun to pick up reflections of the IR signal from obstacles.

'An Op-Amp monitors the servo battery voltage. Frankenstein ramps up the voltage using PWM pin 10 (Low_Voltage_Threshold)
'until the Op-Amp signals pin 11.  This final PWM value is close to the sampled servo battery voltage.
'The PWM output pin needs an RC network to store the voltage. Added a 1Kohm resistor and a 3.3uF capacitor between the
'PWM pin and the "-" input of the op-amp to smooth the PWM voltage.

'Pin 9 drives a piezo speaker element - the "voicebox" for audible communication - Morse, tunes, tones, DTMF, etc.

'Pin 8 drives a servo for motion.

'Pins 6, 5 and 4 independently select 3 types of light sources on Frankenstein's raygun:
'P654
'%000 -- All lamps off
'%100 -- Activate a 48mW IR floodlamp
'%010 -- Activate a white LED
'%001 -- Activate a 5mW red LASER

'Pins 0-3 control Frankenstein's motion as follows:
'Pins 3 and 2 select Forward/Reverse/Stop
'%00 -- STOP
'%01 -- Reverse
'%10 -- Forward
'%11 -- STOP (not needed but an inherent function of the circuitry)

'Pins 1 and 0 steer Straight/Left/Right
'%00 -- Straight
'%01 -- Right Turn
'%10 -- Left Turn
'%11 -- Staight (not needed but an inherent function of the circuitry)

'* * * * * * * * * *
'* Initialization  *
'* * * * * * * * * *

DIRS=$07FF

LeftOpticNerve          PIN    15      'Photoresistor facing left monitors ambient visible light.
RightOpticNerve         PIN    14      'Photoresistor facing right monitors ambient visible light.
TemperatureNerve        PIN    13      'Thermistor monitors ambient air temperature.

IR_RC_Receiver          PIN    12      'A 38 kHz IR binary receiver output goes LOW when it detects a 38 kHz infra-red
                                       'signal.  This cannot be used with the IR_Flood_Lamp. FREQOUT commands only
                                       'accept frequency commands up to 32767 Hz. Need to use the ordinary infra-red
                                       'phototransistor with the IR_Flood_Lamp.

Battery_Monitor_6V      PIN    11      'The output of an op-amp goes LOW when the servo power supply voltage drops below
                                       'the PWM voltage from PIN 8 feeding the op-amp's "-" input.
Low_Voltage_Threshold   PIN    10      'PWM output voltage to op-amp monitoring servo & lighting power supply.

Voicebox                PIN    9       'Piezo speaker element (beeps, musical notes, DTMF, ultrasonic transducer up to
                                       '32767 Hz, communicate audibly via Morse)

Muscle_Nerve            PIN    8       'Parallax Servo control output.

Rear_Photo_Bumper       PIN    7       'Ordinary IR phototransistor can pick up reflections from the IR Flood Lamp to
                                       'detect obstacles.

IR_Flood_Lamp           PIN    6       '48mW Infrared Flood Lamp
White_Light             PIN    5       'Bright White LED
Red_LASER               PIN    4       '5 mW red LASER diode

Fwd                     PIN    3       'These two bits control forward & reverse motion: %00 or %11:STOP; %01:Reverse
Rvs                     PIN    2       '%10:Forward. Try using PWM on these pins to control speed.
Left                    PIN    1       'These two bits steer left and right: %00 or %11:Straight; %01:Right Turn;
Right                   PIN    0       '%10:Left Turn. Steering controls are binary only - not PWM compatible.

'The following variables and constants store and measure the value of the light, heat, and voltage sensors.

tLeft                   VAR    Word    'These variables measure the discharge time of the capacitors through the
tRight                  VAR    Word    'photoresistors of each eye.  The electrical resistance of the sensors is
Thermistor              VAR    Word    'calculated by multiplying the raw data units by two to obtain the time in
                                       'microseconds.  This figure is multiplied by 100 to obtain the resistance
Capacitance             CON    2       'in ohms.  0.01 uF capacitors are used on the circuit board.  This constant
                                       'can be changed to improve the accuracy of the calculated data on the ANSI
                                       'terminal screen.  The formula assumes that all three capacitors are the
                                       'exact same value.

Temperature             VAR    Byte    'Calculated temperature in degrees Fahrenheit.
High_Temp               CON    80      'Threshold of high temperature alarm.

Compare_this_voltage    CON    170     'PWM value compared to servo battery voltage
OK                      CON    1       'For 6V battery test

'The following variables are for calculating the light level and differential shading.

Negative                CON    1       ' For negative numbers
light                   VAR    Word    ' Brightness/darkness indicator
ndShade                 VAR    Word    ' Normalized differential shade
n                       VAR    Word    ' Numerator
d                       VAR    Word    ' Denominator
q                       VAR    Word    ' Quotient
sumDiff                 VAR    Word    ' For sum and difference calcs
duty                    VAR    Byte    ' PWM duty argument variable
i                       VAR    Nib     ' Index counting variable
temp                    VAR    Nib     ' Temp storage for calcs
sign                    VAR    Bit     ' Var.BIT15 = 1 if neg, 0 if pos

  duty = 70                            'Initialize duty variable to minimum

  GOSUB sound_alarm                    'Beep twice - initialization successful.

'* * * * * * * * *
'* Main Program  *
'* * * * * * * * *

  DO                                         'Perform this loop forever.
    GOSUB poll_nerves                        'Get lighting & temperature data from resistive sensors.
    GOSUB operate_servo                      'Operate servo-mechanism.
  LOOP
  END

'* * * * * * * *
'* Subroutines *
'* * * * * * * *

'-----[ Subroutine - Light_Shade_Info ]---------------------------------------
' Uses tLeft and tRight (RCTIME measurements) and pwm var to calculate:
' o light - Ambient light level on a scale of 0 to 324
' o ndShade - Normalized differential shade on a scale of -500 to + 500
' (-500 -> dark shade over left, 0 -> equal shade,
' +500 -> dark shade over right)

Light_Shade_Info:

  GOSUB Light_Sensors                                          ' Get raw RC light measurements

  sumdiff = (tLeft + tRight) MAX 65535                         ' Start light level with sum

                                                               ' If duty at min
  IF duty <= 70 THEN light = duty - (sumdiff/905) MIN 1        ' Find how much darker

                                                               ' If timeout, max darkness
  IF sumdiff = 0 THEN
                        light = 0                              ' *** This could be the bug! ***

                                                               ' If duty at max
  ELSEIF duty = 255 THEN
                        light = duty + ((1800 - sumdiff) / 26) ' Find how much brighter

  ELSE                                                         ' If duty in range
                        light = duty                           ' light = duty

  ENDIF                                                        ' Done with light level

  GOSUB Duty_Auto_Adjust                                       ' Adjust PWM duty for next loop
    n = tLeft                                                  ' Set up equation tLeft/(tLeft+tRight)
    d = tLeft + tRight

  GOSUB Fraction_Thousandths                                   ' Divide (returns thousandths)
    ndShade = 500 - q                                          ' Normalized differential shade

RETURN

'-----[ Subroutine - Light_Sensors ]------------------------------------------
' Measure P15 and P14 light sensor circuits. Duty variable must be in 70...255.
' Stores results in tLeft and tRight.

Light_Sensors:

  PWM LeftOpticNerve, duty, 1                ' Charge cap in P15 circuit
  RCTIME LeftOpticNerve, 1, tLeft            ' Measure P15 decay

  PWM RightOpticNerve, duty, 1               ' Charge cap in P14 circuit
  RCTIME RightOpticNerve, 1, tRight          ' Measure P14 decay

RETURN

'-----[ Subroutine - Duty_Auto_Adjust ]---------------------------------------
' Adjust duty variable to keep tLeft + tRight in the 1800 to 2200 range.
' Requires sumdiff word variable for calculations.

Duty_Auto_Adjust:

  sumDiff = (tLeft + tRight) MAX 4000        ' Limit max ambient value

  IF sumDiff = 0 THEN sumDiff = 4000         ' If 0 (timeout) then 4000

  IF (sumDiff<=1800) OR (sumDiff>=2200) THEN ' If outside 1800 to 2200
      sumDiff = 2000 - sumDiff               ' Find excursion from target val
      sign = sumDiff.BIT15                   ' Pos/neg if .BIT15 = 0/1
      sumDiff = ABS(sumDiff) / 10            ' Max sumDiff will be +/- 10
      sumDiff = sumDiff MAX ((duty-68)/2)    ' Reduce adjustment increments
      sumDiff = sumDiff MAX ((257-duty)/2)   ' near ends of the range
      IF sign=NEGATIVE THEN sumDiff=-sumDiff ' Restore sign
      duty = duty + sumDiff MIN 70 MAX 255   ' Limit duty to 70 to 255
  ENDIF ' End of if outside 1800 to 2200

RETURN

'-----[ Subroutine - Fraction_Thousandths ]-----------------------------------
' Calculate q = n/d as a number of thousandths.
' n and d should be unsigned and n < d. Requires Nib size temp & i variables.

Fraction_Thousandths:

  q = 0                                      ' Clear quotient
IF n > 6500 THEN ' If n > 6500
temp = n / 6500 ' scale n into 0..6500
n = n / temp
d = d / temp ' scale d with n
ENDIF
FOR i = 0 TO 3 ' Long division ten thousandths
n = n // d * 10 ' Multiply remainder by 10
q = q * 10 + (n/d) ' Add next digit to quotient
NEXT
IF q//10>=5 THEN q=q/10+1 ELSE q=q/10 ' Round q to nearest thousandth
RETURN ' Return from subroutine

poll_nerves:

    HIGH TemperatureNerve                    'Apply +5 volts (HIGH) to charge the capacitors on the optic nerves.

    PAUSE 1                                  'Charge the capacitors for at least 1 millisecond for a full +5V charge.
                                             '220 ohms (in the port lines) * 0.01uF = 2.2uS = 1 RC time constant
                                             '2.2uS * 5 time constants (for full charge) = 11 microseconds.
                                             '11uS + 20% (for tolerances) = 13.2uS.

    RCTIME TemperatureNerve, 1, Thermistor   'Allow the Temperature capacitor to discharge and store the discharge time.
    Thermistor = Thermistor * Capacitance    'Convert all raw sensor data to approximate resistance in Kohms.

    LOOKDOWN Thermistor, > [199, 195, 189, 181, 177, 173, 171, 165, 164, 159, 157, 155, 153, 137, 127, 123, 121, 113, 91, 89, 87, 85, 83, 81, 73, 71], Temperature
    LOOKUP Temperature, [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 75, 76, 77, 80, 86, 98, 100, 102, 103, 104, 106, 108, 110], Temperature

    IF Temperature > High_Temp THEN
       GOSUB sound_alarm                     'When the temperature exceeds a certain value, sound the alarm!
       GOSUB hi_temp_code
    ENDIF

    GOSUB Light_Shade_Info

    PWM Low_Voltage_Threshold, Compare_this_voltage, 17          'Charge the PWM RC network for 17ms.
    IF Battery_Monitor_6V = OK THEN                              'Is the 6-Volt battery OK?
       GOSUB batt_ok_code
    ELSE
       GOSUB sound_alarm
       GOSUB lo_batt_code                                        'sound the alarm!
    ENDIF

    IF IR_RC_Receiver = 0 THEN                'If Frankenstein detects an IR Remote Control signal then...
       HIGH Red_LASER                       '   "I see it!"
    ELSE
       LOW Red_LASER                        '   "I don't see it."
    ENDIF

RETURN

sound_alarm:

    FREQOUT Voicebox, 100, 2500
    PAUSE 250
    FREQOUT Voicebox, 100, 2500
    RETURN

operate_servo:

DEBUG HOME, "light = ", DEC3 light, ' Display light & ndShade
"/324", CLREOL, CR,
"ndShade = ", SDEC3 ndShade, CLREOL, CR,
"duty = ", DEC3 duty, CLREOL

    IF ndShade < -250 THEN                                    'Light source is to the left
       PULSOUT Muscle_Nerve, 350
       PAUSE 5
    ELSEIF ndShade > 250 THEN                                       'Light source is to the right
       PULSOUT Muscle_Nerve, 1150
    ELSEIF ndShade = 0 THEN
       PULSOUT Muscle_Nerve, 750                               'Light source is centered
       PAUSE 5
    ENDIF
                                                 '750 is centered
RETURN

hi_temp_code:
    LOW White_Light
    LOW Red_LASER
    HIGH White_Light
    PAUSE 100
    LOW White_Light
    PAUSE 100
    HIGH White_Light
    PAUSE 100
    LOW White_Light
    PAUSE 250
    HIGH Red_LASER
    PAUSE 100
    LOW Red_LASER
    PAUSE 100
    HIGH Red_LASER
    PAUSE 100
    LOW Red_LASER
    PAUSE 100
RETURN

batt_ok_code:
    LOW IR_Flood_Lamp
    HIGH IR_Flood_Lamp
RETURN

lo_batt_code:
    OUT2=0
    OUT1=0
    OUT0=1
    PAUSE 100
    OUT0=0
    PAUSE 250
    OUT1=1
    PAUSE 100
    OUT1=0
    PAUSE 100
RETURN
    END